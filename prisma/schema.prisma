generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  password      String?   // null for OAuth-only users
  username      String?   @unique
  name          String?
  avatar        String?
  role          Role?     @default(USER)
  provider      AuthProvider? // "LOCAL", "GOOGLE", "FACEBOOK"
  providerId    String? @unique   // id from provider if OAuth
  isVerified    Boolean  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  exercises     Exercise[] @relation("authorExercises")
  refreshTokens RefreshToken[]
  otpTokens     OtpToken[]
  passwordResetToken PasswordResetToken?
}
model OtpToken {
  id        String   @id @default(uuid())
  otp       String
  userId    String
  purpose   String   // "SIGNUP" or "PASSWORD_RESET"
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Profile {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  bio       String?
  heightCm  Int?
  weightKg  Float?
  gender    String?
  goals     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id          String   @id @default(uuid())
  category    String   // e.g., Strength, Cardio, Flexibility
  author      User     @relation(fields: [authorId], references: [id], name: "authorExercises")
  authorId    String
  title       String
  description String?
  difficulty  String   // e.g., Beginner/Intermediate/Advanced
  muscleGroup String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RefreshToken {
  id        String  @id @default(uuid())
  token     String  @unique
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  revoked   Boolean @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
}



enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK
}
enum Role {
  ADMIN
  USER
  TRAINER
  NUTRITIONIST
  MODERATOR
  GUEST
}
